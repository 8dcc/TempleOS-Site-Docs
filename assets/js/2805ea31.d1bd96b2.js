"use strict";(self.webpackChunktempleos_simplified=self.webpackChunktempleos_simplified||[]).push([[445],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},563:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={id:"primer",title:"HolyC Primer"},i="HolyC Primer.",o={unversionedId:"holyc/primer",id:"holyc/primer",title:"HolyC Primer",description:"HolyC is a relativly simple language,but like all langauges you will have to",source:"@site/docs/holyc/primer.mdx",sourceDirName:"holyc",slug:"/holyc/primer",permalink:"/holyc/primer",tags:[],version:"current",frontMatter:{id:"primer",title:"HolyC Primer"},sidebar:"holyc",previous:{title:"Getting Started",permalink:"/holyc/getting-started-hc"},next:{title:"Printing",permalink:"/holyc/printing"}},s={},u=[{value:"Variables",id:"variables",level:2},{value:"Types",id:"types",level:2},{value:"Floating points",id:"floating-points",level:3},{value:"Integers",id:"integers",level:3},{value:"Custom Types",id:"custom-types",level:3},{value:"Branching",id:"branching",level:2},{value:"If Statements",id:"if-statements",level:3},{value:"While Statements",id:"while-statements",level:3},{value:"Do Statements",id:"do-statements",level:3},{value:"For Statements",id:"for-statements",level:3},{value:"Switch Statements(1)",id:"switch-statements1",level:3},{value:"Switch Statements(2)",id:"switch-statements2",level:3},{value:"Switch Statements(3) The final chapter",id:"switch-statements3-the-final-chapter",level:3},{value:"Functions",id:"functions",level:2},{value:"Default Arguments",id:"default-arguments",level:3},{value:"Calling without Arguments",id:"calling-without-arguments",level:3}],p={toc:u};function c(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"holyc-primer"},"HolyC Primer."),(0,r.kt)("p",null,"HolyC is a relativly simple language,but like all langauges you will have to\nget started with it. The most simple thing you can do is write text to the screen.\nThis can be done by typing a string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'"I like TempleOS!!!\\n"; //A string is a sequence of letters/charactors\n')),(0,r.kt)("p",null,"Computers are capable of much more the writing text to the screen,they can also\nadd numbers and stuff,let's take a look:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},"I64 a=1; //'a' and 'b' are variables\nI64 b=2;\n\"1+2 is %d\\n\",a+b;\n")),(0,r.kt)("p",null,"Here we added variables,which brings us to our next section.."),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("p",null,"Computers can store values,and In TempleOS they are typically stored in ",(0,r.kt)("em",{parentName:"p"},"variables"),".\nAll variables in TempleOS have a type(which typically comes before the variable name).\nLet's see some various types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},"U8 charactor;\nI32 int_32bit;\nI64 int_64bit;\n//Unsigned dont have a sign bit so you can store extra large values\nU64 unsigned_64bit;\n")),(0,r.kt)("p",null,"As you can see,each type has a specific size. This detirmines how big the value you can\nhold is. But what do we do with variables. We can write values into them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 a;\na=10;\n"a has %d\\n",a;\n')),(0,r.kt)("p",null,"We can even add them togheter,or divide them and whatnot"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 a=1,b=2,c; //You can put multiple variables into 1 line with commas\nc=a*10+b;\n"a*10+b is %d\\n",c;\n')),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("h3",{id:"floating-points"},"Floating points"),(0,r.kt)("p",null,"Each type has a certian thing it's good at. Most of the primitive types are\nintegers,which dont have a decimal point. The opposite of this is a floating point(",(0,r.kt)("inlineCode",{parentName:"p"},"F64"),")\nLet's see it in action"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'F64 flt=3;\nI64 integer=3;\nflt/=2;\ninteger/=2;\n"flt is %n\\n",flt; //USE %n WITHS F64\'s\n"int is %d\\n",integer;\n')),(0,r.kt)("h3",{id:"integers"},"Integers"),(0,r.kt)("p",null,"As you can see,an integer has no decimal point,which means when you divide the decimal point\nis removed,but each integer type has a size(in bits). An 8bit signed integer(",(0,r.kt)("inlineCode",{parentName:"p"},"I8"),") can hold\nup to 127,and a 16bit signed integer (",(0,r.kt)("inlineCode",{parentName:"p"},"I16"),") can hold up to 32767."),(0,r.kt)("p",null,"Let's see the minumum/maximum values for signed integers."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Min"),(0,r.kt)("th",{parentName:"tr",align:null},"Max"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"I8")),(0,r.kt)("td",{parentName:"tr",align:null},"-128"),(0,r.kt)("td",{parentName:"tr",align:null},"127")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"I16")),(0,r.kt)("td",{parentName:"tr",align:null},"-32768"),(0,r.kt)("td",{parentName:"tr",align:null},"32767")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"I32")),(0,r.kt)("td",{parentName:"tr",align:null},"-2147483648"),(0,r.kt)("td",{parentName:"tr",align:null},"2147483647")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"I64")),(0,r.kt)("td",{parentName:"tr",align:null},"-9223372036854775808"),(0,r.kt)("td",{parentName:"tr",align:null},"9223372036854775807")))),(0,r.kt)("p",null,"Unsigned variables do not have a negative sign,but they can represent bigger positive\nnumbers."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Min"),(0,r.kt)("th",{parentName:"tr",align:null},"Max"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"U8")),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"255")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"U16")),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"65535")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"U32")),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"4294967295")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"U64")),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"18446744073709551615")))),(0,r.kt)("h3",{id:"custom-types"},"Custom Types"),(0,r.kt)("p",null,"Sometimes you want to make custom types to represent your data. Let's say you want a\nrectangle,you could do this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},"class CRectangle {\n    I64 x,y;\n    I64 width,height;\n};\nCRectangle rect;\nrect.x=200;\nrect.y=300;\nrect.width=100;\nrect.height=100;\n\ngr.dc->color=RED;\nGrRect(gr.dc,rect.x,rect.y,rect.width,rect.height);\nSleep(1000);;\nDCFill(gr.dc,TRANSPARENT);\n")),(0,r.kt)("p",null,"You can also have ",(0,r.kt)("em",{parentName:"p"},"inheritance")," of types. A type can inherit all of the\nproperties of a base type like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},"class CPoint {\n    I64 x,y;\n};\nclass CCircle:CPoint { //Look here\n    I64 radius;\n};\nCCircle circ;\ncirc.x=350;\ncirc.y=250;\ncirc.radius=100;\ngr.dc->color=RED;\nGrFillCircle(gr.dc,circ.x,circ.y,0,circ.radius*2);\nSleep(1000);\nDCFill(gr.dc,TRANSPARENT);\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"inher",src:n(9188).Z,width:"1316",height:"504"}),"\n",(0,r.kt)("em",{parentName:"p"},"The inherited class starts at the start of the new classes's memory")),(0,r.kt)("p",null,"Sometimes you want to save memory. You can do this via ",(0,r.kt)("inlineCode",{parentName:"p"},"union"),"s . These store data at same location in memory. This means if you are only using 1 member at once,you can save space."),(0,r.kt)("p",null,"If you have a ",(0,r.kt)("inlineCode",{parentName:"p"},"CGeneric")," class that has a type and a value,we could do this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'#define GEN_INT 1\n#define GEN_FLT 2\n\nclass CGeneric {\n  I64 type;\n  union {\n    F64 flt;\n    I64 int;\n  };\n};\n\nCGeneric f,i;\nf.type=GEN_FLT;\nf.flt=3.14;\n\nif(f.type==GEN_FLT)\n  "%n\\n",f.flt;\nelse if(f.type==GEN_INT)\n  "%d\\n",f.flt;\n\n\ni.type=GEN_INT;\ni.int=10;\n\nif(i.type==GEN_FLT)\n  "%n\\n",i.flt;\nelse if(i.type==GEN_INT)\n  "%d\\n",i.flt;\n')),(0,r.kt)("h2",{id:"branching"},"Branching"),(0,r.kt)("p",null,"Computers are great at making decisions based on variables,we can do this via various branch statements,which the most basic of them is ",(0,r.kt)("inlineCode",{parentName:"p"},"if"),",let's see it"),(0,r.kt)("h3",{id:"if-statements"},"If Statements"),(0,r.kt)("p",null,"If statements are the most basic of branch statements. They take 1 argument. It will test if the value is not 0,and ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," it isn't 0."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 x=10;\nif(x) {\n  "x is not FALSE\\n";\n}\nx=0;\nif(x) {\n  "x is not FALSE\\n";\n}\n')),(0,r.kt)("p",null,"You can test if a value is false via an ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 x=10;\nif(x) {\n  "x is not FALSE\\n";\n} else {\n  "x is FALSE\\n";\n}\nx=0;\nif(x) {\n  "x is not FALSE\\n";\n} else {\n  "x is FALSE\\n";\n}\n')),(0,r.kt)("p",null,"Oh,and there is also an operator ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," that will turn a ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUE")," into a ",(0,r.kt)("inlineCode",{parentName:"p"},"FALSE"),",and a ",(0,r.kt)("inlineCode",{parentName:"p"},"FALSE")," into a ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUE"),". It's called the logical not operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 x=10;\nif(!x) {\n  "!x is TRUE\\n";\n} else {\n  "!x is FALSE\\n";\n}\nx=0;\nif(!x) {\n  "!x is TRUE\\n";\n} else {\n  "!x is FALSE\\n";\n}\n')),(0,r.kt)("h3",{id:"while-statements"},"While Statements"),(0,r.kt)("p",null,"Sometimes we want to loop,sometimes we want a countdown. We can do this by looping"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 i=10;\nwhile(i) {\n  "COUNTDOWN:%d\\n",i;\n  i=i-1;\n}\n"BLAST-OFF\\n";\n')),(0,r.kt)("p",null,"While is like an if statement,but it repeats if the condition is true.\nIf you want to exit a loop without going to the start,we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"break")," statement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 i=10;\nwhile(TRUE) {\n  "COUNTDOWN:%d\\n",i;\n  i=i-1;\n  if(i==0) {\n    "Breaking now\\n";\n    break;\n  }\n}\n"BLAST-OFF\\n";\n')),(0,r.kt)("h3",{id:"do-statements"},"Do Statements"),(0,r.kt)("p",null,"Do statements are like for statements but they do the looping-check at the end. This way you can run your code ",(0,r.kt)("em",{parentName:"p"},"then")," check if we need to run again"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'Bool should_continue=TRUE;\ndo {\n  //Do something\n  "I will not continue\\n";\n  should_continue=FALSE;\n} while(should_continue);\n')),(0,r.kt)("h3",{id:"for-statements"},"For Statements"),(0,r.kt)("p",null,"For statements are cool,they have 3 parts that are separated by semi-colons"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The start"),(0,r.kt)("li",{parentName:"ul"},"The condition"),(0,r.kt)("li",{parentName:"ul"},"The end part")),(0,r.kt)("p",null,"The first part here is ",(0,r.kt)("inlineCode",{parentName:"p"},"x=1"),",the second part is the condition,and the end part(",(0,r.kt)("inlineCode",{parentName:"p"},"x=x+1"),") is run at the end of each cycle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 x;\n//!= means does not equal\nfor(x=1;x!=10;x=x+1) {\n  "Countup %d\\n",x;\n}\n')),(0,r.kt)("h3",{id:"switch-statements1"},"Switch Statements(1)"),(0,r.kt)("p",null,"Let's say you have code to turn a number into a word,you could do this with if statements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'U8 *NumToStr(I64 num) {\n  if(num==0)\n    return "ZERO";\n  else if(num==1)\n    return "ONE";\n  else if(num==2)\n    return "TWO";\n  else if(num==3)\n    return "THREE";\n  else if(num==4)\n    return "FOUR";\n  return NULL;\n}\nI64 num;\nfor(num=0;num<=4;num++)\n  "%d is %s\\n",num,NumToStr(num);\n')),(0,r.kt)("p",null,"This could get really big if we have tons off values,luckily for us TempleOS has us covered with switch statements."),(0,r.kt)("p",null,"Switch statements are like if-statements and goto statements combines. A switch statement will jump to a ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," from the condition value,or ",(0,r.kt)("strong",{parentName:"p"},"if nothing is found you can jump to a optinal default label"),". Oh,and ",(0,r.kt)("strong",{parentName:"p"},"be sure to exit the switch statement using a ",(0,r.kt)("inlineCode",{parentName:"strong"},"break")," statement.")," It looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'U8 *NumToStr(I64 num) {\n  U8 *ret;\n  switch(num) {\n    case 0: ret="ZERO"; break;\n    case 1: ret="ONE"; break;\n    case 2: ret="TWO"; break;\n    case 3: ret="THREE"; break;\n    case 4: ret="FOUR"; break;\n    //This condition is run if no match is found\n    default: return NULL;\n  }\n  return ret;\n}\nI64 num;\nfor(num=0;num<=4;num++)\n  "%d is %s\\n",num,NumToStr(num);\n')),(0,r.kt)("h3",{id:"switch-statements2"},"Switch Statements(2)"),(0,r.kt)("p",null,"Sometimes you have code that you want to run before a case(and maybe you want to run the same code before another case). We can you a feature unique to TempleOS called sub-switches. You can put your start code after a ",(0,r.kt)("inlineCode",{parentName:"p"},"start:")," label,and you put end code after a ",(0,r.kt)("inlineCode",{parentName:"p"},"end:")," label. Let's see a canonical example from TempleOS:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'U0 Main() {\n  I64 i;\n  for (i=0;i<10;i++)\n    switch (i) {\n      case 0:\n        "Zero ";\n        break;\n      case 2: "Two ";\n        break;\n      case 4: "Four ";\n        break;\n      start:\n        "[";\n        case 1: "One";\n      break;\n        case 3: "Three";\n      break;\n        case 5: "Five";\n      break;\n      end:\n        "] ";\n        break;\n    }\n}\nMain;\n')),(0,r.kt)("p",null,"In the above example ,we run ",(0,r.kt)("inlineCode",{parentName:"p"},'"[";')," to display a ",(0,r.kt)("em",{parentName:"p"},"[")," before the number and in the ",(0,r.kt)("inlineCode",{parentName:"p"},"end:")," block we run ",(0,r.kt)("inlineCode",{parentName:"p"},'"]";'),". to display a ",(0,r.kt)("em",{parentName:"p"},"]"),"."),(0,r.kt)("h3",{id:"switch-statements3-the-final-chapter"},"Switch Statements(3) The final chapter"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Switch statements are always jump tables,so don't make tables that are too gaint.")," Switch statements come in 2 types. Bounded and un-bounded. ",(0,r.kt)("strong",{parentName:"p"},"If you know for a fact that your condition will be within a certian range,you can skip the range check for a slight speed gain")," Unbounded switch statements use ",(0,r.kt)("inlineCode",{parentName:"p"},"switch []")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"switch()"),". I don't know why you would need this and it is a great source of bugs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'U8 *NumToStr4(I64 num) {\n  U8 *ret;\n  switch[num] {\n    case 0: ret="ZERO"; break;\n    case 1: ret="ONE"; break;\n    case 2: ret="TWO"; break;\n    case 3: ret="THREE"; break;\n    case 4: ret="FOUR"; break;\n  }\n  return ret;\n}\nI64 num;\n//DO NOT EXCEEDE 4 OR BAD THINGS WILL HAPPEN\nfor(num=0;num<=4;num++)\n  "%d is %s\\n",num,NumToStr4(num);\n')),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("p",null,"Sometimes you have a common piece of code you want to run over and over again(possibly with different variables). Nearly everything in TempleOS is done this way with ",(0,r.kt)("em",{parentName:"p"},"functions"),"."),(0,r.kt)("p",null,"You can make a function like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'\nI64 Add3(\n//Takes 3 arguments\n    I64 a,\n    I64 b,\n    I64 c\n) {\n  //Put your function code in here\n  return a+b+c;\n}\n//You call the function with parenthesis\n"1+2+3==%d\\n",Add3(1,2,3);\n')),(0,r.kt)("h3",{id:"default-arguments"},"Default Arguments"),(0,r.kt)("p",null,"TempleOS let's you assign default values to your arguments. ",(0,r.kt)("strong",{parentName:"p"},"THESE VALUES ARE COMPUTED AT COMPILE TIME AND DO NOT CHANGE."),",Oh and an example of a default argument in action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 Add3(I64 a=1,I64 b=2,I64 c=3) {\n  return a+b+c;\n}\n"100+2+300==%d\\n",Add3(100,,300);\n')),(0,r.kt)("h3",{id:"calling-without-arguments"},"Calling without Arguments"),(0,r.kt)("p",null,"If all the values have default arguments,you can call the function without parenthesis!!!","*","*"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},'I64 Add3(I64 a=1,I64 b=2,I64 c=3) {\n  return a+b+c;\n}\n"1+2+3==%d\\n",Add3; //Same as Add3(1,2,3);\n')))}c.isMDXComponent=!0},9188:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/inher-506571ab7591f75bb3914ff0ddd0bf86.png"}}]);