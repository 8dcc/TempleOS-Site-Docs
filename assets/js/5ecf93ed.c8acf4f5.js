"use strict";(self.webpackChunktempleos_simplified=self.webpackChunktempleos_simplified||[]).push([[375],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(k,o(o({ref:t},s),{},{components:n})):a.createElement(k,o({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={id:"input",title:"User Input"},o="Input",i={unversionedId:"holyc/input",id:"holyc/input",title:"User Input",description:"One of the most important parts of using an operating system is being able",source:"@site/docs/holyc/input.mdx",sourceDirName:"holyc",slug:"/holyc/input",permalink:"/holyc/input",draft:!1,tags:[],version:"current",frontMatter:{id:"input",title:"User Input"},sidebar:"holyc",previous:{title:"DolDoc",permalink:"/holyc/doldoc"},next:{title:"Multi-Threading",permalink:"/holyc/multic"}},p={},c=[],s={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"input"},"Input"),(0,r.kt)("p",null,"One of the most important parts of using an operating system is being able\nto interact with it. TempleOS lets you access the mouse and keyboard. So let's\nget started!"),(0,r.kt)("h1",{id:"mouse-input"},"Mouse Input"),(0,r.kt)("p",null,"In TempleOS events are typeically accessed via the messaging mechanism. We can get the mouse\ncoordnates by the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetMsg")," function while looking for ",(0,r.kt)("inlineCode",{parentName:"p"},"MSG_MS_MOVE"),". You can check for\na mouse click via ",(0,r.kt)("inlineCode",{parentName:"p"},"MSG_MS_R_DOWN")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"MSG_MS_R_DOWN"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},"I64 x,y;\nU0 DrawIt(CTask *t,CDC *dc) {\n    dc->color=RED;\n    GrRect(dc,x,y,100,100);\n}\nU0 Run() {\n    Fs->draw_it=&DrawIt;\n    I64 m,x2,y2;\n    while(TRUE) {\n        //Here we write into the memory address containing x2/y2 by getting\n        // the addresses of x2/y2 and GetMsg with write into the these addresses\n        // chaning their values\n        m=GetMsg(&x2,&y2,1<<MSG_MS_MOVE+1<<MSG_MS_R_DOWN);\n        if(m==MSG_MS_R_DOWN)\n            break;\n        x=x2;\n        y=y2;\n        Refresh;\n    }\n}\nRun;\n")),(0,r.kt)("h1",{id:"keyboard-input1"},"Keyboard Input(1)"),(0,r.kt)("p",null,"You can get keys much like mouse events in TempleOS using ",(0,r.kt)("inlineCode",{parentName:"p"},"GetMsg"),". But before\nwe dive into this we need to know how keys are transmitted. There are"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Charactors(letters/numbers/etc) and"),(0,r.kt)("li",{parentName:"ul"},"Scancodes(the raw keycode with modifier keys like Ctrl/Alt)")),(0,r.kt)("p",null,"A charactor is typically what can get displayed on the screen,but scancodes are\nthe juicy stuff. If you press ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),", the charactor will be ",(0,r.kt)("inlineCode",{parentName:"p"},"'A'"),",but the scancode will\nbe the raw key code in the ",(0,r.kt)("inlineCode",{parentName:"p"},".u8")," from your keyboard AND some flags.(You can turn a charactor into a\nscancode via ",(0,r.kt)("inlineCode",{parentName:"p"},"Char2ScanCode('A');"),")"),(0,r.kt)("p",null,"The flags here will tell you if you were holding down ALT,CTRL,SHIFT or other\nfun buttons while you pressed. You can check for these flags with the ",(0,r.kt)("inlineCode",{parentName:"p"},"&")," operator."),(0,r.kt)("p",null,"A simple example looks like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},"I64 x,y;\nI64 color=GREEN;\nU0 DrawIt(CTask*,CDC*dc) {\n    dc->color=color;\n    GrRect(dc,x,y,100,100);\n    dc->color=RED;\n}\nU0 Run() {\n    Fs->draw_it=&DrawIt;\n    I64 msg,sc,ch;\n    for(;TRUE;) {\n        if(ScanMsg(&ch,&sc,1<<MSG_KEY_UP|1<<MSG_KEY_DOWN)) {\n            //SCAN IS STORED IN FIRST 8 BITS OF sc\n            if(sc.u8[0]==SC_ESC) break;\n            if(sc.u8[0]==SC_CURSOR_UP) {\n                y-=3;\n            } else if(sc.u8[0]==SC_CURSOR_DOWN) {\n                y+=3;\n            } else if(sc.u8[0]==SC_CURSOR_LEFT) {\n                x-=3;\n            } else if(sc.u8[0]==SC_CURSOR_RIGHT) {\n                x+=3;\n            }\n            //WE USE THE & OPERATOR TO TEST IF THE FLAG BIT IS SET OR NOT\n            if(sc&SCF_CTRL)\n                color=RED;\n            else if(sc&SCF_SHIFT)\n                color=YELLOW;\n            else\n                color=GREEN;\n        } else {\n            //Wait for a frame to be rendered\n            Refresh;\n        }\n    }\n}\nRun;\n")),(0,r.kt)("h1",{id:"keyboard-input2-scancode-galore"},"Keyboard Input(2) Scancode Galore"),(0,r.kt)("p",null,"Scancodes have a rigid format. Each byte in a scancdoe has a specific purpose.\nThe first byte is the most important and can be accessed via ",(0,r.kt)("inlineCode",{parentName:"p"},"scancode.u8[0]"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Byte"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"Scancode (SC_ESC,SC_CURSOR_LEFT)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1 through 3"),(0,r.kt)("td",{parentName:"tr",align:null},"Flags")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4 Repeat of byte 0"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5 through 7"),(0,r.kt)("td",{parentName:"tr",align:null},"Repeat of bytes 1-3")))),(0,r.kt)("p",null,"The flags are plentiful and contain a bitmask. You can test for a flag by\nbitwise ANDing with the scancode to test the bit is set(no need to ",(0,r.kt)("inlineCode",{parentName:"p"},"use scancode.u8[xxx]"),")"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Flag"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCF_KEY_UP"),(0,r.kt)("td",{parentName:"tr",align:null},"The key is being released")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCF_SHIFT"),(0,r.kt)("td",{parentName:"tr",align:null},"The shift key is down.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCFCTRL"),(0,r.kt)("td",{parentName:"tr",align:null},"The control key is down.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCF_ALT"),(0,r.kt)("td",{parentName:"tr",align:null},"The alt key is down.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCF_CAPS"),(0,r.kt)("td",{parentName:"tr",align:null},"The caps key is active.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCF_NUM"),(0,r.kt)("td",{parentName:"tr",align:null},"The numlock key is active.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCF_SCROLL"),(0,r.kt)("td",{parentName:"tr",align:null},"The scrolllock key is active.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCF_MS_L_DOWN"),(0,r.kt)("td",{parentName:"tr",align:null},"Mouse left button is down.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCF_MS_R_DOWN"),(0,r.kt)("td",{parentName:"tr",align:null},"Mouse left button is down.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SCF_NO_SHIFT"),(0,r.kt)("td",{parentName:"tr",align:null},"Shift is not active.")))),(0,r.kt)("h1",{id:"keyboard-input3multiple-keys-at-once"},"Keyboard Input(3)Multiple keys at once"),(0,r.kt)("p",null,"Sometimes you want to check if multiple keys are down at once. Luckily for\nyou TempleOS keeps a record of all down keys. It is a ",(0,r.kt)("em",{parentName:"p"},"bitfield")," called ",(0,r.kt)("inlineCode",{parentName:"p"},"kbd.down_bitmap"),".\nEach scancode is a bit and can tested via ",(0,r.kt)("inlineCode",{parentName:"p"},"Bt(kbd.down_bitmap,scancode)"),"... Example time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-holyc"},"I64 x,y;\nU0 DrawIt(CTask*,CDC*dc) {\n  dc->color=GREEN;\n  GrRect(dc,x,y,100,100);\n}\nU0 Run() {\n  Fs->draw_it=&DrawIt;\n  I64 msg,sc,ch;\n  for(;TRUE;) {\n    if(Bt(kbd.down_bitmap,SC_ESC)) break;\n    if(Bt(kbd.down_bitmap,SC_CURSOR_UP)) y-=3;\n    if(Bt(kbd.down_bitmap,SC_CURSOR_DOWN)) y+=3;\n    if(Bt(kbd.down_bitmap,SC_CURSOR_LEFT)) x-=3;\n    if(Bt(kbd.down_bitmap,SC_CURSOR_RIGHT)) x+=3;\n    //Wait for a frame to be rendered\n    Refresh;\n  }\n}\nRun;\nExit;\n")))}d.isMDXComponent=!0}}]);