"use strict";(self.webpackChunktempleos_simplified=self.webpackChunktempleos_simplified||[]).push([[217],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8406:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={id:"memory",title:"Memory Management"},i="TempleOS Memory",l={unversionedId:"holyc/memory",id:"holyc/memory",title:"Memory Management",description:"Pointers",source:"@site/docs/holyc/memory.mdx",sourceDirName:"holyc",slug:"/holyc/memory",permalink:"/holyc/memory",tags:[],version:"current",frontMatter:{id:"memory",title:"Memory Management"},sidebar:"holyc",previous:{title:"Printing",permalink:"/holyc/printing"},next:{title:"Data Structures",permalink:"/holyc/datastructs"}},p={},s=[{value:"Pointers",id:"pointers",level:2},{value:"Types of memory.",id:"types-of-memory",level:2},{value:"Stack",id:"stack",level:3},{value:"Heap",id:"heap",level:3},{value:"Getting pointers",id:"getting-pointers",level:2},{value:"Pointer types.",id:"pointer-types",level:2}],c={toc:s};function m(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"templeos-memory"},"TempleOS Memory"),(0,a.kt)("h2",{id:"pointers"},"Pointers"),(0,a.kt)("p",null,"TempleOS uses a shared memory space between tasks. This means you can access a tasks memory from any other task.\nBut before we can do this,we need to know how to access memory(or even what memory is)."),(0,a.kt)("p",null,"Memory looks something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},"//This is 16kb of memory.\nU8 RAM[65536];\n")),(0,a.kt)("p",null,"It looks like a table and you can store or load values from ",(0,a.kt)("inlineCode",{parentName:"p"},"RAM"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'U8 RAM[65536];\nRAM[0]=1; //Arrays in TempleOS start at 0\nRAM[1]=2;\nRAM[2]=3;\n"RAM[0] is %d\\n",RAM[0];\n')),(0,a.kt)("p",null,"Pointers are the index in RAM a value is."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},"U8 RAM[65536];\nI64 pointer=356;\nRAM[pointer]=10;\nI64 value=RAM[pointer];\n")),(0,a.kt)("p",null,"Let's see a real-world example of a pointer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'//Use a \'*\' to make a variable into a pointer\n//Double qoutes make a string in memory\nU8 *pointer="ABCD"; \n\n"%d(%c)\\n",pointer[0],pointer[0];\n"%d(%c)\\n",pointer[1],pointer[1];\n"%d(%c)\\n",pointer[2],pointer[2];\n"%d(%c)\\n",pointer[3],pointer[3];\n"%d\\n",pointer[3];\n')),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Pointer",src:n(9388).Z,width:"882",height:"627"})),(0,a.kt)("h2",{id:"types-of-memory"},"Types of memory."),(0,a.kt)("p",null,"The most important part of RAM is being able to use it,but before we can\nuse it we need to see how it is divided. There are two main types of memory in RAM:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Stack"),(0,a.kt)("li",{parentName:"ul"},"Heap ")),(0,a.kt)("h3",{id:"stack"},"Stack"),(0,a.kt)("p",null,"The easiest one is called the ",(0,a.kt)("em",{parentName:"p"},"Heap"),". This type of memory comes and goes when it is needed.\nThe second type is called the ",(0,a.kt)("em",{parentName:"p"},"Stack"),". This memory does not come and go,",(0,a.kt)("strong",{parentName:"p"},"it is allocated when a\nfunction is called and doesn't change it's pointer"),". Imagine a tower of blocks. The topmost block\nis where the current function is called,and the below blocks are where the parent functions are.\nYou cannot remove a block from the bottom or the tower will fall,so we only place/remove blocks\nfrom the top"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Stack",src:n(8116).Z,width:"882",height:"627"}),"\n",(0,a.kt)("em",{parentName:"p"},"Note that all local variables in functions are put on the stack.")),(0,a.kt)("h3",{id:"heap"},"Heap"),(0,a.kt)("p",null,"Heap memory comes from ",(0,a.kt)("em",{parentName:"p"},"Random")," locations in RAM that aren't reserved for anything.\nIt's like a cloud that is full of \"random\" data. To make some memory from the heap,we\nuse ",(0,a.kt)("inlineCode",{parentName:"p"},"MAlloc"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"CAlloc")," to get request some data from the computer.",(0,a.kt)("strong",{parentName:"p"},"And be sure to\n",(0,a.kt)("inlineCode",{parentName:"strong"},"Free")," the data when you are done with it.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'U8 *heap_ptr=MAlloc(STR_LEN);\nStrCpy(heap_ptr,"I love the heap");\n"Our heap pointer says:%s\\n",heap_ptr;\n//Bye Bye\nFree(heap_ptr);\n')),(0,a.kt)("h2",{id:"getting-pointers"},"Getting pointers"),(0,a.kt)("p",null,"All local vairables in a function are allocated on the stack and you can get pointers to them\nTo do this,we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"&")," operator,we write into it using the ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," operator.\nLet's see an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'U0 Foo() {\n    I64 a=1,b=2,c=3;\n    I64 *i64_ptr=&a; //We get the pointer here\n    "Pointer of a is:%d\\n",i64_ptr;\n    //Here we use the \'*\' operator to write a value into the pointer\n    *i64_ptr=100;\n    "a\'s new value is :%d\\n",a;\n}\nFoo;\n')),(0,a.kt)("h2",{id:"pointer-types"},"Pointer types."),(0,a.kt)("p",null,"In TempleOS,each variable has a type. This type also detirmines how big the variable is,\n",(0,a.kt)("strong",{parentName:"p"},"AND"),' it also affects the "width" of the pointer. Let\'s see an example of how this is used'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'U0 Foo() {\n    //Each one of these dudes is 8 bytes.\n    //The pointer to an I64 will move 8 bytes each "index"\n    I64 array[3];\n    array[0]=1;\n    array[1]=2;\n    array[2]=3;\n    I64 *ptr=&array;\n    "Look at the values,they increase by 8\\n";\n    "ptr+0 is %d\\n",ptr+0;\n    "ptr+1 is %d\\n",ptr+1;\n    "ptr+2 is %d\\n",ptr+2;\n    "\\n";\n    "*(ptr+0) is %d\\n",*(ptr+0);\n    "*(ptr+1) is %d\\n",*(ptr+1);\n    "*(ptr+2) is %d\\n",*(ptr+2);\n}\nFoo;\n')))}m.isMDXComponent=!0},9388:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/pointer-f87c0117306c0c0d8351a4c992739016.png"},8116:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/stack-ae66578a829e7f1551b48ae9722ae037.png"}}]);