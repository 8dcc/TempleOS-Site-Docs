"use strict";(self.webpackChunktempleos_simplified=self.webpackChunktempleos_simplified||[]).push([[346],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3253:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={id:"printing",title:"Printing"},o="Printing like a pro",l={unversionedId:"holyc/printing",id:"holyc/printing",title:"Printing",description:"Printing in TempleOS means printing to the screen(not to paper).",source:"@site/docs/holyc/print.mdx",sourceDirName:"holyc",slug:"/holyc/printing",permalink:"/holyc/printing",tags:[],version:"current",frontMatter:{id:"printing",title:"Printing"},sidebar:"holyc",previous:{title:"Getting Started",permalink:"/holyc/getting-started-hc"},next:{title:"Data Structures",permalink:"/holyc/datastructs"}},p={},s=[{value:"Basic formatting",id:"basic-formatting",level:2},{value:"z/Z Formating",id:"zz-formating",level:2},{value:"Auxiliary value",id:"auxiliary-value",level:2}],c={toc:s};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"printing-like-a-pro"},"Printing like a pro"),(0,a.kt)("p",null,"Printing in TempleOS means printing to the screen(not to paper).\nIf you want to print a string,just type the string like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'"Hello World\\n";\n')),(0,a.kt)("h2",{id:"basic-formatting"},"Basic formatting"),(0,a.kt)("p",null,"The print routine in TempleOS takes some (or no) arguments,you provide arguments like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'"%d,%d,%d\\n",1,2,3;\n')),(0,a.kt)("p",null,"The arguments are ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),",",(0,a.kt)("inlineCode",{parentName:"p"},"2"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"3")," here and the format code is ",(0,a.kt)("inlineCode",{parentName:"p"},"d"),"(Integer decimal).\nThere are various formatting codes for different types of data,to use a floating point number,use ",(0,a.kt)("em",{parentName:"p"},"n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'"Pi is %n\\n",3.14;\n')),(0,a.kt)("p",null,"The basic formatting codes are:\n|Code| Meaning |Type |\n|--|--|---|\n|d|Integer|",(0,a.kt)("inlineCode",{parentName:"p"},"I64"),"|\n|S|Define string|",(0,a.kt)("inlineCode",{parentName:"p"},"U8*"),"|\n|C|Uppercase charactor|",(0,a.kt)("inlineCode",{parentName:"p"},"U8/U64"),"|\n|p or P|Pointer to named symbol|Pointer|\n|x or X|Hexidecimal|Pointer/",(0,a.kt)("inlineCode",{parentName:"p"},"I64"),"|\n|D|Date|",(0,a.kt)("inlineCode",{parentName:"p"},"CDate"),"|\n|T|Time|",(0,a.kt)("inlineCode",{parentName:"p"},"CDate"),"|\n|q|Quoted string(turns '\"' into escape sequences)|",(0,a.kt)("inlineCode",{parentName:"p"},"U8*"),"|\n|Q|Reverse quoted string|",(0,a.kt)("inlineCode",{parentName:"p"},"U8*"),"|\n|Z|",(0,a.kt)("inlineCode",{parentName:"p"},"DefineLst")," entry(Takes 2 arguments)|",(0,a.kt)("inlineCode",{parentName:"p"},"U8 *")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"I64"),"|\n|z|Sub-entry of \\0 terminated string(Takes 2 arguments)|",(0,a.kt)("inlineCode",{parentName:"p"},"U8 *")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"I64"),"| "),(0,a.kt)("h2",{id:"zz-formating"},"z/Z Formating"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"DefineLst"),"'s are things whose items are separated by ",(0,a.kt)("inlineCode",{parentName:"p"},"\\0"),"s,they look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'DefineLstLoad("SOME_LIST","a\\0b\\0c\\0");\n')),(0,a.kt)("p",null,"We can use the list like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},' DefineLstLoad("SOME_LIST","a\\0b\\0c\\0");\n I64 i;\n for(i=0;i!=3;i++)\n   "HERE:%Z\\n",i,"SOME_LIST";\n')),(0,a.kt)("h2",{id:"auxiliary-value"},"Auxiliary value"),(0,a.kt)("p",null,"The auxiliary value does various things for different format codes.\nFor ",(0,a.kt)("inlineCode",{parentName:"p"},"c"),",it repeats the character X times,we can do it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},"\"c%h3cl\\n\",'o';\n")),(0,a.kt)("p",null,"For numbers,it will set the decimal point of the number(useful for ",(0,a.kt)("inlineCode",{parentName:"p"},"F64"),"'s).\nFor example if we want to view a number in units of 1000,we can do this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'"%h3n\\n",1234567.; //Be sure to use a . to get a F64\n')),(0,a.kt)("p",null,'We get do negative numbers too for "milli" units'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'"%h-3n\\n",0.123456;\n')),(0,a.kt)("p",null,'We can have the Print routine choose the auxiliary for us using "?".'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"},'"%h?n\\n",1234567.;\n')),(0,a.kt)("p",null,"This is really cool. We can use an arbitrary value as the auxiliary value using ",(0,a.kt)("inlineCode",{parentName:"p"},"*"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-holyc"}," I64 repeat=10;\n \"t%h*cn\\n\",repeat,'e';\n")))}u.isMDXComponent=!0}}]);